@startuml(id=SampleLibrary)
interface SampleLibrary{
+invokeZone(): Sample
}
@enduml


@startuml(id=V1SampleLibrary)
class V1SampleLibrary<<SampleLibrary>>{

}
@enduml


@startuml(id=SampleFactory)
class SampleFactory{
+prepareSamples(): SampleLibrary
}
@enduml


@startuml(id=ZoneGraph)
interface ZoneGraph{
+invokeZone(): Sample
+addLayer(TiggerLayer)
}
@enduml

@startuml(id=V1ZoneGraph)
class V1ZoneGraph<<ZoneGraph>>{

}
@enduml

@startuml(id=ZoneFactory)
class ZoneFactory{
+{static}prepareZones(): ZoneGraph
}
@enduml


'''



@startuml(id=Instrument)
class Instrument{
-Player
init()
}
@enduml


@startuml(id=ResourceManager)
class ResourceManager{

'+{static} prepareSnapshot()
'-{static}  analyzeFiles()
'+{static} getGroupCount()
'+{static} getLayerCount(group: Int)
'+{static} getRoundRobinCount(group: Int, layer: Int)
'+{static} getResource(group: Int, layer: Int, roundRobin: Int)
}
@enduml



@startuml(id=ZoneManager)
interface ZoneManager{
prepareZoneManager()
computeVelocityLayer(Point): VelocityLayer
}
@enduml


@startuml(id=SimpleZoneManager)
class SimpleZoneManager<<ZoneManager>>{
ZoneGraph
}
@enduml



@startuml(id=ArticulationZone)
interface ArticulationZone{
invokeZone(Point): VelocityLayer
}
@enduml


@startuml(id=V1ArticulationZone)
class V1ArticulationZone<<ArticulationZone>>{

}
@enduml





@startuml(id=VelocityZone)
interface VelocityZone{
isMatch(Point): boolean
}
@enduml


@startuml(id=V1VelocityZone)
class V1VelocityZone<<VelocityZone>>{
topLimit: Int
bottomLimit: Int
rightLimit: Int
leftLimit: Int

}
@enduml



@startuml(id=PlayerFactory)
class PlayerFactory{

+{static} getInstance(ZoneManager, SampleManager)
}
@enduml


@startuml(id=Player)
interface Player{
+invokeSample(): Sample
-startThread()
-play(Sample)
}
@enduml



@startuml(id=SimplePlayer)
class SimplePlayer<<Player>>{
-ZoneManager
-SampleManager
}
@enduml



@startuml(id=RoundRobinLogic)
interface RoundRobinLogic{
computeID(): SampleID
addInstance(SampleID)
}
@enduml


@startuml(id=SimpleRoundRobinLogic)
class SimpleRoundRobinLogic<<RoundRobinLogic>>{
history: Queue<SampleID>

}
@enduml


@startuml(id=SampleManager)
interface SampleManager{
+computeSample(VelocityLayer): Sample
+invokeArticulation(VelocityLayer): Sample
+prepareSampleManager()
}
@enduml


@startuml(id=SimpleSampleManager)
class SimpleSampleManager<<SampleManager>>{
-layers: Map<VelocityLayer, VelocityLayer>
}
@enduml


@startuml(id=Articulation)
interface Articulation{
invokeZone(): Sample
}
@enduml


@startuml(id=V1Articulation)
class V1Articulation<<Articulation>>{
-Map<VelocityLayer, VelocityLayer>
}
@enduml

@startuml(id=VelocityLayer)
interface VelocityLayer{
+invokeSample(): Sample
+addSample(Sample)
}
@enduml


@startuml(id=V1VelocityLayer)
class V1VelocityLayer<<VelocityLayer>>{
samplesThisLayer: Map<SampleID, Sample>
}
@enduml



@startuml(id=SampleID)
interface SampleID{
identify()
}
@enduml


@startuml(id=SampleCoords)
class SampleCoords<<SampleID>>{
layer: Int
roundRobin: Int
}
@enduml


@startuml(id=Sample)
interface Sample{
-createPlayer()
+play()
+getSampleID(): SampleID
}
@enduml


@startuml(id=V1Sample)
class V1Sample<<Sample>>{
context: Context
sampleID: SampleID
resourceID: Int
{field} availPlayers: Queue<MediaPlayer> (or ExoPlayer)
{field} busyPlayers: Queue<MediaPlayer> (or ExoPlayer)
moveToBusy()
}
@enduml

